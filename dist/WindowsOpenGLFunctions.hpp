#ifndef RF_GL_WINDOWSOPENGLFUNCTIONS_HPP
#define RF_GL_WINDOWSOPENGLFUNCTIONS_HPP
n#if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
#define WIN32_LEAN_AND_MEAN 1
#include <windows.h>
#endif

#ifndef APIENTRY
#define APIENTRY
#endif
#ifndef APIENTRYP
#define APIENTRYP APIENTRY *
#endif
#ifndef GLAPI
#define GLAPI extern
#endif

//namespace RadonFramework { namespace GL {

typedef void (*ChoosePixelFormatType)(HDC,PIXELFORMATDESCRIPTOR);
extern ChoosePixelFormatType ChoosePixelFormat;
typedef void (*DescribePixelFormatType)(HDC,void,UINT,PIXELFORMATDESCRIPTOR);
extern DescribePixelFormatType DescribePixelFormat;
typedef void (*GetPixelFormatType)(HDC);
extern GetPixelFormatType GetPixelFormat;
typedef BOOL (*SetPixelFormatType)(HDC,void,PIXELFORMATDESCRIPTOR);
extern SetPixelFormatType SetPixelFormat;
typedef BOOL (*SwapBuffersType)(HDC);
extern SwapBuffersType SwapBuffers;
typedef void (*wglAllocateMemoryNVType)(GLsizei,GLfloat,GLfloat,GLfloat);
extern wglAllocateMemoryNVType wglAllocateMemoryNV;
typedef BOOL (*wglAssociateImageBufferEventsI3DType)(HDC,HANDLE,LPVOID,DWORD,UINT);
extern wglAssociateImageBufferEventsI3DType wglAssociateImageBufferEventsI3D;
typedef BOOL (*wglBeginFrameTrackingI3DType)();
extern wglBeginFrameTrackingI3DType wglBeginFrameTrackingI3D;
typedef GLboolean (*wglBindDisplayColorTableEXTType)(GLushort);
extern wglBindDisplayColorTableEXTType wglBindDisplayColorTableEXT;
typedef BOOL (*wglBindSwapBarrierNVType)(GLuint,GLuint);
extern wglBindSwapBarrierNVType wglBindSwapBarrierNV;
typedef BOOL (*wglBindTexImageARBType)(HPBUFFERARB,void);
extern wglBindTexImageARBType wglBindTexImageARB;
typedef BOOL (*wglBindVideoCaptureDeviceNVType)(UINT,HVIDEOINPUTDEVICENV);
extern wglBindVideoCaptureDeviceNVType wglBindVideoCaptureDeviceNV;
typedef BOOL (*wglBindVideoDeviceNVType)(HDC,void,HVIDEOOUTPUTDEVICENV,void);
extern wglBindVideoDeviceNVType wglBindVideoDeviceNV;
typedef BOOL (*wglBindVideoImageNVType)(HPVIDEODEV,HPBUFFERARB,void);
extern wglBindVideoImageNVType wglBindVideoImageNV;
typedef VOID (*wglBlitContextFramebufferAMDType)(HGLRC,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLint,GLbitfield,GLenum);
extern wglBlitContextFramebufferAMDType wglBlitContextFramebufferAMD;
typedef BOOL (*wglChoosePixelFormatARBType)(HDC,void,FLOAT,UINT,void,UINT);
extern wglChoosePixelFormatARBType wglChoosePixelFormatARB;
typedef BOOL (*wglChoosePixelFormatEXTType)(HDC,void,FLOAT,UINT,void,UINT);
extern wglChoosePixelFormatEXTType wglChoosePixelFormatEXT;
typedef BOOL (*wglCopyContextType)(HGLRC,HGLRC,UINT);
extern wglCopyContextType wglCopyContext;
typedef BOOL (*wglCopyImageSubDataNVType)(HGLRC,GLuint,GLenum,GLint,GLint,GLint,GLint,HGLRC,GLuint,GLenum,GLint,GLint,GLint,GLint,GLsizei,GLsizei,GLsizei);
extern wglCopyImageSubDataNVType wglCopyImageSubDataNV;
typedef HDC (*wglCreateAffinityDCNVType)(HGPUNV);
extern wglCreateAffinityDCNVType wglCreateAffinityDCNV;
typedef HGLRC (*wglCreateAssociatedContextAMDType)(UINT);
extern wglCreateAssociatedContextAMDType wglCreateAssociatedContextAMD;
typedef HGLRC (*wglCreateAssociatedContextAttribsAMDType)(UINT,HGLRC,void);
extern wglCreateAssociatedContextAttribsAMDType wglCreateAssociatedContextAttribsAMD;
typedef HANDLE (*wglCreateBufferRegionARBType)(HDC,void,UINT);
extern wglCreateBufferRegionARBType wglCreateBufferRegionARB;
typedef HGLRC (*wglCreateContextType)(HDC);
extern wglCreateContextType wglCreateContext;
typedef HGLRC (*wglCreateContextAttribsARBType)(HDC,HGLRC,void);
extern wglCreateContextAttribsARBType wglCreateContextAttribsARB;
typedef GLboolean (*wglCreateDisplayColorTableEXTType)(GLushort);
extern wglCreateDisplayColorTableEXTType wglCreateDisplayColorTableEXT;
typedef LPVOID (*wglCreateImageBufferI3DType)(HDC,DWORD,UINT);
extern wglCreateImageBufferI3DType wglCreateImageBufferI3D;
typedef HGLRC (*wglCreateLayerContextType)(HDC,void);
extern wglCreateLayerContextType wglCreateLayerContext;
typedef HPBUFFERARB (*wglCreatePbufferARBType)(HDC,void,void,void,void);
extern wglCreatePbufferARBType wglCreatePbufferARB;
typedef HPBUFFEREXT (*wglCreatePbufferEXTType)(HDC,void,void,void,void);
extern wglCreatePbufferEXTType wglCreatePbufferEXT;
typedef BOOL (*wglDelayBeforeSwapNVType)(HDC,GLfloat);
extern wglDelayBeforeSwapNVType wglDelayBeforeSwapNV;
typedef BOOL (*wglDeleteAssociatedContextAMDType)(HGLRC);
extern wglDeleteAssociatedContextAMDType wglDeleteAssociatedContextAMD;
typedef VOID (*wglDeleteBufferRegionARBType)(HANDLE);
extern wglDeleteBufferRegionARBType wglDeleteBufferRegionARB;
typedef BOOL (*wglDeleteContextType)(HGLRC);
extern wglDeleteContextType wglDeleteContext;
typedef BOOL (*wglDeleteDCNVType)(HDC);
extern wglDeleteDCNVType wglDeleteDCNV;
typedef BOOL (*wglDescribeLayerPlaneType)(HDC,void,void,UINT,LAYERPLANEDESCRIPTOR);
extern wglDescribeLayerPlaneType wglDescribeLayerPlane;
typedef VOID (*wglDestroyDisplayColorTableEXTType)(GLushort);
extern wglDestroyDisplayColorTableEXTType wglDestroyDisplayColorTableEXT;
typedef BOOL (*wglDestroyImageBufferI3DType)(HDC,LPVOID);
extern wglDestroyImageBufferI3DType wglDestroyImageBufferI3D;
typedef BOOL (*wglDestroyPbufferARBType)(HPBUFFERARB);
extern wglDestroyPbufferARBType wglDestroyPbufferARB;
typedef BOOL (*wglDestroyPbufferEXTType)(HPBUFFEREXT);
extern wglDestroyPbufferEXTType wglDestroyPbufferEXT;
typedef BOOL (*wglDisableFrameLockI3DType)();
extern wglDisableFrameLockI3DType wglDisableFrameLockI3D;
typedef BOOL (*wglDisableGenlockI3DType)(HDC);
extern wglDisableGenlockI3DType wglDisableGenlockI3D;
typedef BOOL (*wglDXCloseDeviceNVType)(HANDLE);
extern wglDXCloseDeviceNVType wglDXCloseDeviceNV;
typedef BOOL (*wglDXLockObjectsNVType)(HANDLE,GLint,HANDLE);
extern wglDXLockObjectsNVType wglDXLockObjectsNV;
typedef BOOL (*wglDXObjectAccessNVType)(HANDLE,GLenum);
extern wglDXObjectAccessNVType wglDXObjectAccessNV;
typedef HANDLE (*wglDXOpenDeviceNVType)(void);
extern wglDXOpenDeviceNVType wglDXOpenDeviceNV;
typedef HANDLE (*wglDXRegisterObjectNVType)(HANDLE,void,GLuint,GLenum,GLenum);
extern wglDXRegisterObjectNVType wglDXRegisterObjectNV;
typedef BOOL (*wglDXSetResourceShareHandleNVType)(void,HANDLE);
extern wglDXSetResourceShareHandleNVType wglDXSetResourceShareHandleNV;
typedef BOOL (*wglDXUnlockObjectsNVType)(HANDLE,GLint,HANDLE);
extern wglDXUnlockObjectsNVType wglDXUnlockObjectsNV;
typedef BOOL (*wglDXUnregisterObjectNVType)(HANDLE,HANDLE);
extern wglDXUnregisterObjectNVType wglDXUnregisterObjectNV;
typedef BOOL (*wglEnableFrameLockI3DType)();
extern wglEnableFrameLockI3DType wglEnableFrameLockI3D;
typedef BOOL (*wglEnableGenlockI3DType)(HDC);
extern wglEnableGenlockI3DType wglEnableGenlockI3D;
typedef BOOL (*wglEndFrameTrackingI3DType)();
extern wglEndFrameTrackingI3DType wglEndFrameTrackingI3D;
typedef UINT (*wglEnumerateVideoCaptureDevicesNVType)(HDC,HVIDEOINPUTDEVICENV);
extern wglEnumerateVideoCaptureDevicesNVType wglEnumerateVideoCaptureDevicesNV;
typedef void (*wglEnumerateVideoDevicesNVType)(HDC,HVIDEOOUTPUTDEVICENV);
extern wglEnumerateVideoDevicesNVType wglEnumerateVideoDevicesNV;
typedef BOOL (*wglEnumGpuDevicesNVType)(HGPUNV,UINT,PGPU_DEVICE);
extern wglEnumGpuDevicesNVType wglEnumGpuDevicesNV;
typedef BOOL (*wglEnumGpusFromAffinityDCNVType)(HDC,UINT,HGPUNV);
extern wglEnumGpusFromAffinityDCNVType wglEnumGpusFromAffinityDCNV;
typedef BOOL (*wglEnumGpusNVType)(UINT,HGPUNV);
extern wglEnumGpusNVType wglEnumGpusNV;
typedef void (*wglFreeMemoryNVType)(void);
extern wglFreeMemoryNVType wglFreeMemoryNV;
typedef BOOL (*wglGenlockSampleRateI3DType)(HDC,UINT);
extern wglGenlockSampleRateI3DType wglGenlockSampleRateI3D;
typedef BOOL (*wglGenlockSourceDelayI3DType)(HDC,UINT);
extern wglGenlockSourceDelayI3DType wglGenlockSourceDelayI3D;
typedef BOOL (*wglGenlockSourceEdgeI3DType)(HDC,UINT);
extern wglGenlockSourceEdgeI3DType wglGenlockSourceEdgeI3D;
typedef BOOL (*wglGenlockSourceI3DType)(HDC,UINT);
extern wglGenlockSourceI3DType wglGenlockSourceI3D;
typedef UINT (*wglGetContextGPUIDAMDType)(HGLRC);
extern wglGetContextGPUIDAMDType wglGetContextGPUIDAMD;
typedef HGLRC (*wglGetCurrentAssociatedContextAMDType)();
extern wglGetCurrentAssociatedContextAMDType wglGetCurrentAssociatedContextAMD;
typedef HGLRC (*wglGetCurrentContextType)();
extern wglGetCurrentContextType wglGetCurrentContext;
typedef HDC (*wglGetCurrentDCType)();
extern wglGetCurrentDCType wglGetCurrentDC;
typedef HDC (*wglGetCurrentReadDCARBType)();
extern wglGetCurrentReadDCARBType wglGetCurrentReadDCARB;
typedef HDC (*wglGetCurrentReadDCEXTType)();
extern wglGetCurrentReadDCEXTType wglGetCurrentReadDCEXT;
typedef PROC (*wglGetDefaultProcAddressType)(LPCSTR);
extern wglGetDefaultProcAddressType wglGetDefaultProcAddress;
typedef BOOL (*wglGetDigitalVideoParametersI3DType)(HDC,void,void);
extern wglGetDigitalVideoParametersI3DType wglGetDigitalVideoParametersI3D;
typedef UINT (*GetEnhMetaFilePixelFormatType)(HENHMETAFILE,PIXELFORMATDESCRIPTOR);
extern GetEnhMetaFilePixelFormatType GetEnhMetaFilePixelFormat;
typedef void (*wglGetExtensionsStringARBType)(HDC);
extern wglGetExtensionsStringARBType wglGetExtensionsStringARB;
typedef void (*wglGetExtensionsStringEXTType)();
extern wglGetExtensionsStringEXTType wglGetExtensionsStringEXT;
typedef BOOL (*wglGetFrameUsageI3DType)(void);
extern wglGetFrameUsageI3DType wglGetFrameUsageI3D;
typedef BOOL (*wglGetGammaTableI3DType)(HDC,void,USHORT,USHORT,USHORT);
extern wglGetGammaTableI3DType wglGetGammaTableI3D;
typedef BOOL (*wglGetGammaTableParametersI3DType)(HDC,void,void);
extern wglGetGammaTableParametersI3DType wglGetGammaTableParametersI3D;
typedef BOOL (*wglGetGenlockSampleRateI3DType)(HDC,UINT);
extern wglGetGenlockSampleRateI3DType wglGetGenlockSampleRateI3D;
typedef BOOL (*wglGetGenlockSourceDelayI3DType)(HDC,UINT);
extern wglGetGenlockSourceDelayI3DType wglGetGenlockSourceDelayI3D;
typedef BOOL (*wglGetGenlockSourceEdgeI3DType)(HDC,UINT);
extern wglGetGenlockSourceEdgeI3DType wglGetGenlockSourceEdgeI3D;
typedef BOOL (*wglGetGenlockSourceI3DType)(HDC,UINT);
extern wglGetGenlockSourceI3DType wglGetGenlockSourceI3D;
typedef UINT (*wglGetGPUIDsAMDType)(UINT,UINT);
extern wglGetGPUIDsAMDType wglGetGPUIDsAMD;
typedef INT (*wglGetGPUInfoAMDType)(UINT,void,GLenum,UINT,void);
extern wglGetGPUInfoAMDType wglGetGPUInfoAMD;
typedef void (*wglGetLayerPaletteEntriesType)(HDC,void,void,void,COLORREF);
extern wglGetLayerPaletteEntriesType wglGetLayerPaletteEntries;
typedef BOOL (*wglGetMscRateOMLType)(HDC,INT32,INT32);
extern wglGetMscRateOMLType wglGetMscRateOML;
typedef HDC (*wglGetPbufferDCARBType)(HPBUFFERARB);
extern wglGetPbufferDCARBType wglGetPbufferDCARB;
typedef HDC (*wglGetPbufferDCEXTType)(HPBUFFEREXT);
extern wglGetPbufferDCEXTType wglGetPbufferDCEXT;
typedef BOOL (*wglGetPixelFormatAttribfvARBType)(HDC,void,void,UINT,void,FLOAT);
extern wglGetPixelFormatAttribfvARBType wglGetPixelFormatAttribfvARB;
typedef BOOL (*wglGetPixelFormatAttribfvEXTType)(HDC,void,void,UINT,void,FLOAT);
extern wglGetPixelFormatAttribfvEXTType wglGetPixelFormatAttribfvEXT;
typedef BOOL (*wglGetPixelFormatAttribivARBType)(HDC,void,void,UINT,void,void);
extern wglGetPixelFormatAttribivARBType wglGetPixelFormatAttribivARB;
typedef BOOL (*wglGetPixelFormatAttribivEXTType)(HDC,void,void,UINT,void,void);
extern wglGetPixelFormatAttribivEXTType wglGetPixelFormatAttribivEXT;
typedef PROC (*wglGetProcAddressType)(LPCSTR);
extern wglGetProcAddressType wglGetProcAddress;
typedef void (*wglGetSwapIntervalEXTType)();
extern wglGetSwapIntervalEXTType wglGetSwapIntervalEXT;
typedef BOOL (*wglGetSyncValuesOMLType)(HDC,INT64,INT64,INT64);
extern wglGetSyncValuesOMLType wglGetSyncValuesOML;
typedef BOOL (*wglGetVideoDeviceNVType)(HDC,void,HPVIDEODEV);
extern wglGetVideoDeviceNVType wglGetVideoDeviceNV;
typedef BOOL (*wglGetVideoInfoNVType)(HPVIDEODEV,void,void);
extern wglGetVideoInfoNVType wglGetVideoInfoNV;
typedef BOOL (*wglIsEnabledFrameLockI3DType)(BOOL);
extern wglIsEnabledFrameLockI3DType wglIsEnabledFrameLockI3D;
typedef BOOL (*wglIsEnabledGenlockI3DType)(HDC,BOOL);
extern wglIsEnabledGenlockI3DType wglIsEnabledGenlockI3D;
typedef BOOL (*wglJoinSwapGroupNVType)(HDC,GLuint);
extern wglJoinSwapGroupNVType wglJoinSwapGroupNV;
typedef GLboolean (*wglLoadDisplayColorTableEXTType)(GLushort,GLuint);
extern wglLoadDisplayColorTableEXTType wglLoadDisplayColorTableEXT;
typedef BOOL (*wglLockVideoCaptureDeviceNVType)(HDC,HVIDEOINPUTDEVICENV);
extern wglLockVideoCaptureDeviceNVType wglLockVideoCaptureDeviceNV;
typedef BOOL (*wglMakeAssociatedContextCurrentAMDType)(HGLRC);
extern wglMakeAssociatedContextCurrentAMDType wglMakeAssociatedContextCurrentAMD;
typedef BOOL (*wglMakeContextCurrentARBType)(HDC,HDC,HGLRC);
extern wglMakeContextCurrentARBType wglMakeContextCurrentARB;
typedef BOOL (*wglMakeContextCurrentEXTType)(HDC,HDC,HGLRC);
extern wglMakeContextCurrentEXTType wglMakeContextCurrentEXT;
typedef BOOL (*wglMakeCurrentType)(HDC,HGLRC);
extern wglMakeCurrentType wglMakeCurrent;
typedef BOOL (*wglQueryCurrentContextNVType)(void,void);
extern wglQueryCurrentContextNVType wglQueryCurrentContextNV;
typedef BOOL (*wglQueryFrameCountNVType)(HDC,GLuint);
extern wglQueryFrameCountNVType wglQueryFrameCountNV;
typedef BOOL (*wglQueryFrameLockMasterI3DType)(BOOL);
extern wglQueryFrameLockMasterI3DType wglQueryFrameLockMasterI3D;
typedef BOOL (*wglQueryFrameTrackingI3DType)(DWORD,DWORD,void);
extern wglQueryFrameTrackingI3DType wglQueryFrameTrackingI3D;
typedef BOOL (*wglQueryGenlockMaxSourceDelayI3DType)(HDC,UINT,UINT);
extern wglQueryGenlockMaxSourceDelayI3DType wglQueryGenlockMaxSourceDelayI3D;
typedef BOOL (*wglQueryMaxSwapGroupsNVType)(HDC,GLuint,GLuint);
extern wglQueryMaxSwapGroupsNVType wglQueryMaxSwapGroupsNV;
typedef BOOL (*wglQueryPbufferARBType)(HPBUFFERARB,void,void);
extern wglQueryPbufferARBType wglQueryPbufferARB;
typedef BOOL (*wglQueryPbufferEXTType)(HPBUFFEREXT,void,void);
extern wglQueryPbufferEXTType wglQueryPbufferEXT;
typedef BOOL (*wglQuerySwapGroupNVType)(HDC,GLuint,GLuint);
extern wglQuerySwapGroupNVType wglQuerySwapGroupNV;
typedef BOOL (*wglQueryVideoCaptureDeviceNVType)(HDC,HVIDEOINPUTDEVICENV,void,void);
extern wglQueryVideoCaptureDeviceNVType wglQueryVideoCaptureDeviceNV;
typedef BOOL (*wglRealizeLayerPaletteType)(HDC,void,BOOL);
extern wglRealizeLayerPaletteType wglRealizeLayerPalette;
typedef BOOL (*wglReleaseImageBufferEventsI3DType)(HDC,LPVOID,UINT);
extern wglReleaseImageBufferEventsI3DType wglReleaseImageBufferEventsI3D;
typedef void (*wglReleasePbufferDCARBType)(HPBUFFERARB,HDC);
extern wglReleasePbufferDCARBType wglReleasePbufferDCARB;
typedef void (*wglReleasePbufferDCEXTType)(HPBUFFEREXT,HDC);
extern wglReleasePbufferDCEXTType wglReleasePbufferDCEXT;
typedef BOOL (*wglReleaseTexImageARBType)(HPBUFFERARB,void);
extern wglReleaseTexImageARBType wglReleaseTexImageARB;
typedef BOOL (*wglReleaseVideoCaptureDeviceNVType)(HDC,HVIDEOINPUTDEVICENV);
extern wglReleaseVideoCaptureDeviceNVType wglReleaseVideoCaptureDeviceNV;
typedef BOOL (*wglReleaseVideoDeviceNVType)(HPVIDEODEV);
extern wglReleaseVideoDeviceNVType wglReleaseVideoDeviceNV;
typedef BOOL (*wglReleaseVideoImageNVType)(HPBUFFERARB,void);
extern wglReleaseVideoImageNVType wglReleaseVideoImageNV;
typedef BOOL (*wglResetFrameCountNVType)(HDC);
extern wglResetFrameCountNVType wglResetFrameCountNV;
typedef BOOL (*wglRestoreBufferRegionARBType)(HANDLE,void,void,void,void,void,void);
extern wglRestoreBufferRegionARBType wglRestoreBufferRegionARB;
typedef BOOL (*wglSaveBufferRegionARBType)(HANDLE,void,void,void,void);
extern wglSaveBufferRegionARBType wglSaveBufferRegionARB;
typedef BOOL (*wglSendPbufferToVideoNVType)(HPBUFFERARB,void,void,BOOL);
extern wglSendPbufferToVideoNVType wglSendPbufferToVideoNV;
typedef BOOL (*wglSetDigitalVideoParametersI3DType)(HDC,void,void);
extern wglSetDigitalVideoParametersI3DType wglSetDigitalVideoParametersI3D;
typedef BOOL (*wglSetGammaTableI3DType)(HDC,void,USHORT,USHORT,USHORT);
extern wglSetGammaTableI3DType wglSetGammaTableI3D;
typedef BOOL (*wglSetGammaTableParametersI3DType)(HDC,void,void);
extern wglSetGammaTableParametersI3DType wglSetGammaTableParametersI3D;
typedef void (*wglSetLayerPaletteEntriesType)(HDC,void,void,void,COLORREF);
extern wglSetLayerPaletteEntriesType wglSetLayerPaletteEntries;
typedef BOOL (*wglSetPbufferAttribARBType)(HPBUFFERARB,void);
extern wglSetPbufferAttribARBType wglSetPbufferAttribARB;
typedef BOOL (*wglSetStereoEmitterState3DLType)(HDC,UINT);
extern wglSetStereoEmitterState3DLType wglSetStereoEmitterState3DL;
typedef BOOL (*wglShareListsType)(HGLRC,HGLRC);
extern wglShareListsType wglShareLists;
typedef INT64 (*wglSwapBuffersMscOMLType)(HDC,INT64,INT64,INT64);
extern wglSwapBuffersMscOMLType wglSwapBuffersMscOML;
typedef BOOL (*wglSwapLayerBuffersType)(HDC,UINT);
extern wglSwapLayerBuffersType wglSwapLayerBuffers;
typedef BOOL (*wglSwapIntervalEXTType)(void);
extern wglSwapIntervalEXTType wglSwapIntervalEXT;
typedef INT64 (*wglSwapLayerBuffersMscOMLType)(HDC,void,INT64,INT64,INT64);
extern wglSwapLayerBuffersMscOMLType wglSwapLayerBuffersMscOML;
typedef BOOL (*wglUseFontBitmapsType)(HDC,DWORD,DWORD,DWORD);
extern wglUseFontBitmapsType wglUseFontBitmaps;
typedef BOOL (*wglUseFontBitmapsAType)(HDC,DWORD,DWORD,DWORD);
extern wglUseFontBitmapsAType wglUseFontBitmapsA;
typedef BOOL (*wglUseFontBitmapsWType)(HDC,DWORD,DWORD,DWORD);
extern wglUseFontBitmapsWType wglUseFontBitmapsW;
typedef BOOL (*wglUseFontOutlinesType)(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,void,LPGLYPHMETRICSFLOAT);
extern wglUseFontOutlinesType wglUseFontOutlines;
typedef BOOL (*wglUseFontOutlinesAType)(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,void,LPGLYPHMETRICSFLOAT);
extern wglUseFontOutlinesAType wglUseFontOutlinesA;
typedef BOOL (*wglUseFontOutlinesWType)(HDC,DWORD,DWORD,DWORD,FLOAT,FLOAT,void,LPGLYPHMETRICSFLOAT);
extern wglUseFontOutlinesWType wglUseFontOutlinesW;
typedef BOOL (*wglWaitForMscOMLType)(HDC,INT64,INT64,INT64,INT64,INT64,INT64);
extern wglWaitForMscOMLType wglWaitForMscOML;
typedef BOOL (*wglWaitForSbcOMLType)(HDC,INT64,INT64,INT64,INT64);
extern wglWaitForSbcOMLType wglWaitForSbcOML;

//} }

//#ifndef RF_SHORTHAND_NAMESPACE_OGL
//#define RF_SHORTHAND_NAMESPACE_OGL
//namespace RF_GL = RadonFramework::GL;
//#endif

#endif // RF_GL_WINDOWSOPENGLFUNCTIONS_HPP